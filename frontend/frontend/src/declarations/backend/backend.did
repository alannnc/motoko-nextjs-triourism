type User__1 = 
 record {
   email: text;
   firstName: text;
   kinds: vec UserKind;
   lastName: text;
   phone: opt nat;
   score: nat;
   verified: bool;
 };
type UserKind = 
 variant {
   Guest: vec ReviewsId;
   Host: vec HousingId__1;
   Initial;
 };
type User = 
 record {
   email: text;
   firstName: text;
   kinds: vec UserKind;
   lastName: text;
   phone: opt nat;
   score: nat;
   verified: bool;
 };
type UpdateResult = 
 variant {
   Err: text;
   Ok;
 };
type Triourism = 
 service {
   addAdmin: (principal) -> (variant {
                               Err;
                               Ok;
                             });
   addPhotoToHousing: (record {
                         id: HousingId;
                         photo: blob;
                       }) -> (variant {
                                Err: text;
                                Ok;
                              });
   addThumbnailToHousing: (record {
                             id: HousingId;
                             thumbnail: blob;
                           }) -> (variant {
                                    Err: text;
                                    Ok;
                                  });
   confirmReservation:
    (record {
       hostId: HousingId;
       reservId: nat;
       txHash: nat;
     }) -> (variant {
              Err: text;
              Ok;
            });
   editProfile: (SignUpData) -> (variant {
                                   Err;
                                   Ok;
                                 });
   getHousingById: (record {
                      housingId: HousingId;
                      photoIndex: nat;
                    }) -> (variant {
                             Err: text;
                             Ok: HousingResponse;
                           }) query;
   getHousingPaginate: (nat) -> (ResultHousingPaginate) query;
   getMyHousingDisponibility: (record {
                                 days: vec nat;
                                 page: nat;
                               }) -> (ResultHousingPaginate) query;
   getMyHousingsPaginate: (record {page: nat;}) -> (ResultHousingPaginate);
   getReservations: (record {housingId: nat;}) ->
    (variant {
       Err: text;
       Ok: vec record {
                 nat;
                 Reservation;
               };
     }) query;
   logIn: () -> (variant {
                   Err;
                   Ok: User__1;
                 }) query;
   publishHousing: (HousingDataInit) -> (PublishResult);
   removeAdmin: (principal) -> (variant {
                                  Err;
                                  Ok;
                                });
   requestReservation:
    (record {
       data: ReservationDataInput;
       housingId: HousingId;
     }) -> (ReservationResult);
   setHousingStatus: (record {
                        active: bool;
                        id: HousingId;
                      }) -> (variant {
                               Err: text;
                               Ok;
                             });
   setMinReservationLeadTime: (record {
                                 hours: nat;
                                 id: HousingId;
                               }) -> (variant {
                                        Err: text;
                                        Ok;
                                      });
   signUp: (SignUpData) -> (SignUpResult);
   signUpAsHost: (SignUpData) -> (SignUpResult);
   updateHosting: (record {
                     data: HousingDataInit;
                     id: nat;
                   }) -> (variant {
                            Err: text;
                            Ok;
                          });
   updatePrices: (record {
                    id: HousingId;
                    prices: vec Price;
                  }) -> (UpdateResult);
 };
type SignUpResult = 
 variant {
   Err: text;
   Ok: User;
 };
type SignUpData = 
 record {
   email: text;
   firstName: text;
   lastName: text;
   phone: opt nat;
 };
type Rules = 
 record {
   key: text;
   value: text;
 };
type ReviewsId = text;
type ResultHousingPaginate = 
 variant {
   Err: text;
   Ok: record {
         array: vec HousingPreview;
         hasNext: bool;
       };
 };
type Reservation__1 = 
 record {
   applicant: principal;
   checkIn: int;
   checkOut: int;
   guest: text;
 };
type ReservationResult = 
 variant {
   Err: text;
   Ok:
    record {
      data: Reservation;
      housingId: HousingId;
      msg: text;
      paymentCode: nat;
      reservationId: nat;
    };
 };
type ReservationDataInput = 
 record {
   checkIn: int;
   checkOut: int;
   guest: text;
 };
type Reservation = 
 record {
   applicant: principal;
   checkIn: int;
   checkOut: int;
   guest: text;
 };
type PublishResult = 
 variant {
   Err: text;
   Ok: HousingId;
 };
type Price = 
 variant {
   CustomPeriod: vec record {
                       dais: nat;
                       price: nat;
                     };
   PerNight: nat;
   PerWeek: nat;
 };
type HousingResponse = 
 variant {
   OnlyPhoto: record {
                hasNextPhoto: bool;
                photo: blob;
              };
   Start:
    record {
      address: text;
      amenities: vec text;
      calendar: vec CalendaryPart;
      description: text;
      hasNextPhoto: bool;
      id: nat;
      kind: HousingKind;
      maxCapacity: nat;
      minReservationLeadTimeNanoSec: int;
      owner: principal;
      photo: blob;
      prices: vec Price;
      properties: record {
                    bathroom: bool;
                    beds: vec BedKind;
                  };
      reviews: vec text;
      rules: vec text;
      thumbnail: blob;
    };
 };
type HousingPreview = 
 record {
   address: text;
   id: nat;
   prices: vec Price;
   thumbnail: blob;
 };
type HousingKind = 
 variant {
   Hotel_room: text;
   House;
   RoomWithSharedSpaces: vec Rules;
 };
type HousingId__1 = nat;
type HousingId = nat;
type HousingDataInit = 
 record {
   address: text;
   amenities: vec text;
   description: text;
   kind: HousingKind;
   maxCapacity: nat;
   minReservationLeadTimeNanoSec: int;
   prices: vec Price;
   properties: record {
                 bathroom: bool;
                 beds: vec BedKind;
               };
   rules: vec text;
 };
type CalendaryPart = 
 record {
   available: bool;
   day: int;
   reservation: opt Reservation__1;
 };
type BedKind = 
 variant {
   Matrimonial: nat;
   Single: nat;
   SofaBed: nat;
 };
service : () -> Triourism
